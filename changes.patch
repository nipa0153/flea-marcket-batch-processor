diff --git a/postgres.session.sql b/postgres.session.sql
new file mode 100644
index 0000000..e69de29
diff --git a/sql/categories.sql b/sql/categories.sql
index aa53ec4..937d7c6 100644
--- a/sql/categories.sql
+++ b/sql/categories.sql
@@ -5,9 +5,9 @@ CREATE TABLE IF NOT EXISTS categories (
     id serial PRIMARY KEY,
     name text NOT NULL,
     parent_id integer,
-    name_all text,
-    UNIQUE(name, parent_id)
+    name_all text
 );
+CREATE INDEX idx_categories ON categories(id, name_all);
 -- 一時テーブルの作成
 -- category_nameがNULLでないレコードについて、各階層を抽出
 CREATE TEMP TABLE temp_categories AS
diff --git a/sql/checked.sql b/sql/checked.sql
new file mode 100644
index 0000000..79fc04b
--- /dev/null
+++ b/sql/checked.sql
@@ -0,0 +1,4 @@
+select c.name_all AS c_name_all
+from items AS i
+    join categories AS c on i.category = c.id
+where c.name_all like 'Beauty/%%';
\ No newline at end of file
diff --git a/sql/items.sql b/sql/items.sql
index 0b6258b..3f57822 100644
--- a/sql/items.sql
+++ b/sql/items.sql
@@ -9,4 +9,115 @@ CREATE TABLE IF NOT EXISTS items(
     shipping integer,
     description text,
     primary key(id)
-);
\ No newline at end of file
+);
+-- 一時テーブルの作成
+CREATE TEMP TABLE temp_category AS
+SELECT id,
+    COALESCE(
+        NULLIF(split_part(category_name, '/', 1), ''),
+        '未分類'
+    ) AS parent,
+    COALESCE(
+        NULLIF(split_part(category_name, '/', 2), ''),
+        '未分類'
+    ) AS child,
+    COALESCE(
+        NULLIF(split_part(category_name, '/', 3), ''),
+        '未分類'
+    ) AS grandchild
+FROM original;
+-- カテゴリマッピングのための一時テーブルを作成
+WITH category_mapping AS (
+    SELECT o.id AS original_id,
+        c.id AS category_id
+    FROM temp_category tc
+        JOIN original o ON tc.id = o.id
+        JOIN category c ON (
+            tc.parent || '/' || tc.child || '/' || tc.grandchild = c.name_all
+            OR (
+                o.category_name IS NULL
+                AND c.name = '未分類'
+            )
+        )
+) -- itemsテーブルへのデータ挿入
+INSERT INTO items (
+        name,
+        condition,
+        category,
+        brand,
+        price,
+        stock,
+        shipping,
+        description
+    )
+SELECT o.name,
+    o.condition_id,
+    cm.category_id,
+    o.brand,
+    o.price,
+    NULL AS stock,
+    -- stockはNULLか適切なデフォルト値
+    o.shipping,
+    o.description
+FROM original o
+    LEFT JOIN category_mapping cm ON o.id = cm.original_id;
+-- 一時テーブルの削除
+DROP TABLE temp_category;
+-- INSERT INTO items (
+--         name,
+--         condition,
+--         category,
+--         brand,
+--         price,
+--         shipping,
+--         description
+--     )
+-- SELECT o.name,
+--     o.condition_id,
+--     CASE
+--         WHEN o.category_name IS NOT NULL THEN (
+--             SELECT c.id
+--             FROM categories AS c
+--             WHERE c.name_all = o.category_name
+--             LIMIT 1
+--         )
+--         ELSE NULL
+--     END AS category,
+--     o.brand,
+--     o.price,
+--     o.shipping,
+--     o.description
+-- FROM originals AS o;
+--さいしゅう
+INSERT INTO items (
+        name,
+        condition,
+        category,
+        brand,
+        price,
+        shipping,
+        description
+    )
+SELECT o.name,
+    o.condition_id,
+    COALESCE(
+        (
+            SELECT c.id
+            FROM categories AS c
+            WHERE -- category_nameから最初の3階層を抽出して比較
+                c.name_all = CONCAT(
+                    NULLIF(split_part(o.category_name, '/', 1), ''),
+                    '/',
+                    NULLIF(split_part(o.category_name, '/', 2), ''),
+                    '/',
+                    NULLIF(split_part(o.category_name, '/', 3), '')
+                )
+            LIMIT 1
+        ), -- カテゴリが見つからない場合はNULLを挿入
+        NULL
+    ) AS category,
+    o.brand,
+    o.price,
+    o.shipping,
+    o.description
+FROM originals AS o;
\ No newline at end of file
diff --git a/sql/start.sql b/sql/start.sql
new file mode 100644
index 0000000..b06c1ae
--- /dev/null
+++ b/sql/start.sql
@@ -0,0 +1,97 @@
+DROP TABLE IF EXISTS items;
+CREATE TABLE IF NOT EXISTS items(
+    id serial not null,
+    name text,
+    condition integer,
+    category integer,
+    brand text,
+    price double precision,
+    shipping integer,
+    description text,
+    primary key(id)
+);
+-- category テーブルの作成
+DROP TABLE IF EXISTS temp_category;
+DROP TABLE IF EXISTS categories;
+CREATE TABLE IF NOT EXISTS categories (
+    id serial PRIMARY KEY,
+    name text NOT NULL,
+    parent_id integer,
+    name_all text
+);
+-- Autogenerated: do not edit this file
+DROP TABLE IF EXISTS BATCH_STEP_EXECUTION_CONTEXT;
+DROP TABLE IF EXISTS BATCH_JOB_EXECUTION_CONTEXT;
+DROP TABLE IF EXISTS BATCH_STEP_EXECUTION;
+DROP TABLE IF EXISTS BATCH_JOB_EXECUTION_PARAMS;
+DROP TABLE IF EXISTS BATCH_JOB_EXECUTION;
+DROP TABLE IF EXISTS BATCH_JOB_INSTANCE;
+DROP SEQUENCE IF EXISTS BATCH_STEP_EXECUTION_SEQ;
+DROP SEQUENCE IF EXISTS BATCH_JOB_EXECUTION_SEQ;
+DROP SEQUENCE IF EXISTS BATCH_JOB_SEQ;
+-- Autogenerated: do not edit this file
+CREATE TABLE BATCH_JOB_INSTANCE (
+    JOB_INSTANCE_ID BIGINT NOT NULL PRIMARY KEY,
+    VERSION BIGINT,
+    JOB_NAME VARCHAR(100) NOT NULL,
+    JOB_KEY VARCHAR(32) NOT NULL,
+    constraint JOB_INST_UN unique (JOB_NAME, JOB_KEY)
+);
+CREATE TABLE BATCH_JOB_EXECUTION (
+    JOB_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY,
+    VERSION BIGINT,
+    JOB_INSTANCE_ID BIGINT NOT NULL,
+    CREATE_TIME TIMESTAMP NOT NULL,
+    START_TIME TIMESTAMP DEFAULT NULL,
+    END_TIME TIMESTAMP DEFAULT NULL,
+    STATUS VARCHAR(10),
+    EXIT_CODE VARCHAR(2500),
+    EXIT_MESSAGE VARCHAR(2500),
+    LAST_UPDATED TIMESTAMP,
+    constraint JOB_INST_EXEC_FK foreign key (JOB_INSTANCE_ID) references BATCH_JOB_INSTANCE(JOB_INSTANCE_ID)
+);
+CREATE TABLE BATCH_JOB_EXECUTION_PARAMS (
+    JOB_EXECUTION_ID BIGINT NOT NULL,
+    PARAMETER_NAME VARCHAR(100) NOT NULL,
+    PARAMETER_TYPE VARCHAR(100) NOT NULL,
+    PARAMETER_VALUE VARCHAR(2500),
+    IDENTIFYING CHAR(1) NOT NULL,
+    constraint JOB_EXEC_PARAMS_FK foreign key (JOB_EXECUTION_ID) references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
+);
+CREATE TABLE BATCH_STEP_EXECUTION (
+    STEP_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY,
+    VERSION BIGINT NOT NULL,
+    STEP_NAME VARCHAR(100) NOT NULL,
+    JOB_EXECUTION_ID BIGINT NOT NULL,
+    CREATE_TIME TIMESTAMP NOT NULL,
+    START_TIME TIMESTAMP DEFAULT NULL,
+    END_TIME TIMESTAMP DEFAULT NULL,
+    STATUS VARCHAR(10),
+    COMMIT_COUNT BIGINT,
+    READ_COUNT BIGINT,
+    FILTER_COUNT BIGINT,
+    WRITE_COUNT BIGINT,
+    READ_SKIP_COUNT BIGINT,
+    WRITE_SKIP_COUNT BIGINT,
+    PROCESS_SKIP_COUNT BIGINT,
+    ROLLBACK_COUNT BIGINT,
+    EXIT_CODE VARCHAR(2500),
+    EXIT_MESSAGE VARCHAR(2500),
+    LAST_UPDATED TIMESTAMP,
+    constraint JOB_EXEC_STEP_FK foreign key (JOB_EXECUTION_ID) references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
+);
+CREATE TABLE BATCH_STEP_EXECUTION_CONTEXT (
+    STEP_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY,
+    SHORT_CONTEXT VARCHAR(2500) NOT NULL,
+    SERIALIZED_CONTEXT TEXT,
+    constraint STEP_EXEC_CTX_FK foreign key (STEP_EXECUTION_ID) references BATCH_STEP_EXECUTION(STEP_EXECUTION_ID)
+);
+CREATE TABLE BATCH_JOB_EXECUTION_CONTEXT (
+    JOB_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY,
+    SHORT_CONTEXT VARCHAR(2500) NOT NULL,
+    SERIALIZED_CONTEXT TEXT,
+    constraint JOB_EXEC_CTX_FK foreign key (JOB_EXECUTION_ID) references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
+);
+CREATE SEQUENCE BATCH_STEP_EXECUTION_SEQ MAXVALUE 9223372036854775807 NO CYCLE;
+CREATE SEQUENCE BATCH_JOB_EXECUTION_SEQ MAXVALUE 9223372036854775807 NO CYCLE;
+CREATE SEQUENCE BATCH_JOB_SEQ MAXVALUE 9223372036854775807 NO CYCLE;
\ No newline at end of file
diff --git a/src/main/java/com/example/CategoryBatch/CategoryConfiguration.java b/src/main/java/com/example/CategoryBatch/CategoryConfiguration.java
deleted file mode 100644
index d5e9d8d..0000000
--- a/src/main/java/com/example/CategoryBatch/CategoryConfiguration.java
+++ /dev/null
@@ -1,68 +0,0 @@
-package com.example.CategoryBatch;
-
-import javax.sql.DataSource;
-
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-import org.springframework.batch.core.Job;
-import org.springframework.batch.core.Step;
-import org.springframework.batch.core.job.builder.JobBuilder;
-import org.springframework.batch.core.repository.JobRepository;
-import org.springframework.batch.core.step.builder.StepBuilder;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
-import org.springframework.jdbc.core.JdbcTemplate;
-import org.springframework.jdbc.datasource.DataSourceTransactionManager;
-import org.springframework.transaction.PlatformTransactionManager;
-import org.springframework.transaction.support.TransactionTemplate;
-
-@Configuration
-public class CategoryConfiguration {
-
-    // @Autowired
-    // private PlatformTransactionManager transactionManager;
-
-    // @Bean
-    // public TransactionTemplate transactionTemplate() {
-    // return new TransactionTemplate(transactionManager);
-    // }
-
-    private final DataSource dataSource;
-
-    public CategoryConfiguration(DataSource dataSource) {
-
-        this.dataSource = dataSource;
-    }
-
-    private static final Logger log = LogManager.getLogger(CategoryConfiguration.class);
-
-    /**
-     * ジョブ
-     * 
-     * @param jobRepository
-     * @param step1
-     * @param listener
-     * @return
-     */
-    @Bean
-    public Job moveToCategoryJob(JobRepository jobRepository, Step step1,
-            JobCompletionNotificationListener notificationListener) {
-        return new JobBuilder("moveToCategoryJob", jobRepository)
-                .listener(notificationListener)
-                .start(step1)
-                .build();
-    }
-
-    @Bean
-    public Step step1(JobRepository jobRepository, DataSourceTransactionManager transactionManager,
-            JdbcTemplate template, CategoryTasklet categoryTasklet,
-            TaskletStepExecution execution) {
-
-        return new StepBuilder("step1", jobRepository)
-                .listener(execution)
-                .tasklet(categoryTasklet, transactionManager)
-                .build();
-    }
-
-}
\ No newline at end of file
diff --git a/src/main/java/com/example/CategoryBatch/CategoryItemProcessor.java b/src/main/java/com/example/CategoryBatch/CategoryItemProcessor.java
deleted file mode 100644
index 084d43e..0000000
--- a/src/main/java/com/example/CategoryBatch/CategoryItemProcessor.java
+++ /dev/null
@@ -1,71 +0,0 @@
-// package com.example.CategoryBatch;
-
-// import org.apache.logging.log4j.LogManager;
-// import org.apache.logging.log4j.Logger;
-// import org.springframework.batch.item.ItemProcessor;
-// import org.springframework.dao.EmptyResultDataAccessException;
-// import org.springframework.jdbc.core.JdbcTemplate;
-
-// import com.example.DTO.CategoryDto;
-// import com.example.Domain.Category;
-// import com.example.Domain.Original;
-
-// public class CategoryItemProcessor implements ItemProcessor<Original,
-// CategoryDto> {
-
-// private final Logger log = LogManager.getLogger(CategoryItemProcessor.class);
-// private JdbcTemplate template;
-
-// public CategoryItemProcessor(JdbcTemplate template) {
-// this.template = template;
-// }
-
-// private static final String SQL = """
-// SELECT id FROM originals WHERE name = ?;
-// """;
-
-// @Override
-// public CategoryDto process(Original original) throws Exception {
-
-// log.debug("処理開始 Originalテーブル", original);
-// if (original.getCategoryName() == null) {
-// return null;
-// }
-
-// String[] parts = original.getCategoryName().split("/");
-// CategoryDto categoryDto = new CategoryDto();
-
-// String parent = parts.length > 0 ? parts[0] : null; // 三項演算子 条件式 ? trueの時に返る値
-// : falseの時に返る値 if文？
-// String child = parts.length > 0 ? parts[1] : null;
-// String grandChild = parts.length > 0 ? parts[2] : null;
-
-// categoryDto.setName(grandChild != null ? grandChild : (child != null ? child
-// : parent));
-
-// categoryDto.setNameAll(String.join("/", parts));
-
-// Integer parentId = findCategoryIdByName(parent);
-// categoryDto.setParentId(parentId);
-
-// log.debug("処理終了 Category分別終了", categoryDto);
-// return categoryDto;
-// }
-
-// /**
-// * 上位カテゴリの検索
-// *
-// * @param categoryName
-// * @return
-// */
-// private Integer findCategoryIdByName(String categoryName) {
-// try {
-// Integer categoryId = template.queryForObject(SQL, Integer.class,
-// categoryName);
-// return categoryId;
-// } catch (EmptyResultDataAccessException e) {
-// return null;
-// }
-// }
-
-// }
diff --git a/src/main/java/com/example/CategoryBatch/CategoryStepExecutionListener.java b/src/main/java/com/example/CategoryBatch/CategoryStepExecutionListener.java
deleted file mode 100644
index a40c01c..0000000
--- a/src/main/java/com/example/CategoryBatch/CategoryStepExecutionListener.java
+++ /dev/null
@@ -1,24 +0,0 @@
-package com.example.CategoryBatch;
-
-import org.springframework.batch.core.ExitStatus;
-import org.springframework.batch.core.StepExecution;
-import org.springframework.batch.core.StepExecutionListener;
-import org.springframework.stereotype.Component;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-
-@Component
-public class CategoryStepExecutionListener implements StepExecutionListener {
-    private static final Logger log = LogManager.getLogger(CategoryStepExecutionListener.class);
-
-    @Override
-    public void beforeStep(StepExecution stepExecution) {
-        log.debug("originalsテーブルの読み込みを開始します", stepExecution);
-    }
-
-    @Override
-    public ExitStatus afterStep(StepExecution stepExecution) {
-        log.debug("originalsテーブルの読み込みが完了しました", stepExecution);
-        return null;
-    }
-}
diff --git a/src/main/java/com/example/CategoryBatch/CategoryWriter.java b/src/main/java/com/example/CategoryBatch/CategoryWriter.java
deleted file mode 100644
index 3900284..0000000
--- a/src/main/java/com/example/CategoryBatch/CategoryWriter.java
+++ /dev/null
@@ -1,123 +0,0 @@
-// package com.example.CategoryBatch;
-
-// import
-// org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider;
-// import org.springframework.batch.item.database.JdbcBatchItemWriter;
-// import
-// org.springframework.batch.item.database.builder.JdbcBatchItemWriterBuilder;
-// import org.springframework.context.annotation.Bean;
-// import org.springframework.context.annotation.Configuration;
-
-// import javax.sql.DataSource;
-// import com.example.Domain.Category;
-
-// @Configuration
-// public class CategoryWriter {
-
-// private static final String INSERT_INTO_PARENT_CATEGORIES = """
-// INSERT INTO
-// categories (
-// name
-// )
-// SELECT DISTINCT
-// parent
-// FROM
-// temp_categories
-// WHERE
-// parent IS NOT NULL;
-// """;
-
-// private static final String INSERT_INTO_CHILD_CATEGORIES = """
-// INSERT INTO
-// categories (
-// name
-// , parent_id
-// )
-// SELECT DISTINCT
-// child
-// , c.id
-// FROM
-// temp_categories AS tc
-// JOIN
-// categories AS c ON tc.parent = c.name
-// WHERE
-// child IS NOT NULL;
-// """;
-// private static final String INSERT_INTO_GRAND_CHILD_CATEGORIES = """
-// INSERT INTO
-// categories (
-// name
-// , parent_id
-// , name_all
-// )
-// SELECT DISTINCT
-// tc.grandchild
-// , c1.id
-// , tc.parent || '/' || tc.child || '/' || tc.grandchild
-// FROM
-// temp_categories AS tc
-// JOIN
-// categories AS c1 ON tc.child = c1.name
-// JOIN
-// categories AS c2 ON tc.parent = c2.name
-// AND
-// c1.parent_id = c2.id
-// WHERE
-// tc.grandchild IS NOT NULL;
-// """;
-
-// private final DataSource dataSource;
-
-// public CategoryWriter(DataSource dataSource) {
-// this.dataSource = dataSource;
-// }
-
-// /**
-// * 親カテゴリの挿入
-// *
-// * @param dataSource
-// * @return
-// */
-// @Bean
-// public JdbcBatchItemWriter<Category> parentCategoryWriter() {
-// return new JdbcBatchItemWriterBuilder<Category>()
-// .itemSqlParameterSourceProvider(new
-// BeanPropertyItemSqlParameterSourceProvider<>())
-// .sql(INSERT_INTO_PARENT_CATEGORIES)
-// .dataSource(dataSource)
-// .build();
-// }
-
-// /**
-// * 子カテゴリの挿入
-// *
-// * @param dataSource
-// * @return
-// */
-// @Bean
-// public JdbcBatchItemWriter<Category> childCategoryWriter() {
-// return new JdbcBatchItemWriterBuilder<Category>()
-// .itemSqlParameterSourceProvider(new
-// BeanPropertyItemSqlParameterSourceProvider<>())
-// .sql(INSERT_INTO_CHILD_CATEGORIES)
-// .dataSource(dataSource)
-// .build();
-// }
-
-// /**
-// * 孫カテゴリの挿入
-// *
-// * @param dataSource
-// * @return
-// */
-// @Bean
-// public JdbcBatchItemWriter<Category> grandChildCategoryWriter() {
-// return new JdbcBatchItemWriterBuilder<Category>()
-// .itemSqlParameterSourceProvider(new
-// BeanPropertyItemSqlParameterSourceProvider<>())
-// .sql(INSERT_INTO_GRAND_CHILD_CATEGORIES)
-// .dataSource(dataSource)
-// .build();
-// }
-
-// }
diff --git a/src/main/java/com/example/CategoryBatch/Config/ImportTableConfiguration.java b/src/main/java/com/example/CategoryBatch/Config/ImportTableConfiguration.java
new file mode 100644
index 0000000..1972e6a
--- /dev/null
+++ b/src/main/java/com/example/CategoryBatch/Config/ImportTableConfiguration.java
@@ -0,0 +1,106 @@
+package com.example.CategoryBatch.Config;
+
+import javax.sql.DataSource;
+
+import org.springframework.batch.core.Job;
+import org.springframework.batch.core.Step;
+import org.springframework.batch.core.job.builder.JobBuilder;
+import org.springframework.batch.core.repository.JobRepository;
+import org.springframework.batch.core.step.builder.StepBuilder;
+import org.springframework.batch.item.database.JdbcBatchItemWriter;
+import org.springframework.batch.item.database.JdbcCursorItemReader;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.jdbc.DataSourceBuilder;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.jdbc.core.JdbcTemplate;
+import org.springframework.jdbc.datasource.DataSourceTransactionManager;
+
+import com.example.CategoryBatch.Config.Listener.JobCompletionNotificationListener;
+import com.example.CategoryBatch.Tasklet.CategoryTasklet;
+import com.example.DTO.ItemsDto;
+import com.example.Domain.Items;
+
+@Configuration
+public class ImportTableConfiguration {
+
+    @Autowired
+    private JdbcCursorItemReader<ItemsDto> itemReader;
+
+    @Autowired
+    private JdbcBatchItemWriter<Items> itemWriter;
+
+    /**
+     * データソース設定
+     * 
+     * @return
+     */
+    @Bean
+    public DataSource dataSource() {
+        DataSourceBuilder<?> dataSourceBuilder = DataSourceBuilder.create();
+        dataSourceBuilder.url("jdbc:postgresql://localhost:5432/postgres");
+        dataSourceBuilder.username("postgres");
+        dataSourceBuilder.password("postgres");
+        dataSourceBuilder.driverClassName("org.postgresql.Driver");
+        return dataSourceBuilder.build();
+    }
+
+    /**
+     * ジョブ
+     * 
+     * @param jobRepository
+     * @param step1
+     * @param listener
+     * @return
+     */
+    @SuppressWarnings("null")
+    @Bean
+    public Job moveToOriginalsJob(JobRepository jobRepository, Step step1, Step step2,
+            JobCompletionNotificationListener notificationListener) {
+        return new JobBuilder("moveToOriginalsJob", jobRepository)
+                .listener(notificationListener)
+                .start(step1)
+                .next(step2)
+                .build();
+    }
+
+    /**
+     * Categoryステップ
+     * 
+     * @param jobRepository
+     * @param transactionManager
+     * @param template
+     * @param categoryTasklet
+     * @param execution
+     * @return
+     */
+    @SuppressWarnings("null")
+    @Bean
+    public Step step1(JobRepository jobRepository, DataSourceTransactionManager transactionManager,
+            JdbcTemplate template, CategoryTasklet categoryTasklet) {
+
+        return new StepBuilder("step1", jobRepository)
+                .tasklet(categoryTasklet, transactionManager)
+                .build();
+    }
+
+    /**
+     * itemsステップ
+     * 
+     * @param jobRepository
+     * @param transactionManager
+     * @param itemReader
+     * @param itemWriter
+     * @return
+     */
+    @SuppressWarnings("null")
+    @Bean
+    public Step step2(JobRepository jobRepository, DataSourceTransactionManager transactionManager) {
+        return new StepBuilder("Step2", jobRepository)
+                .<ItemsDto, Items>chunk(100000, transactionManager)
+                .reader(itemReader)
+                .writer(itemWriter)
+                .build();
+    }
+
+}
\ No newline at end of file
diff --git a/src/main/java/com/example/CategoryBatch/JobCompletionNotificationListener.java b/src/main/java/com/example/CategoryBatch/Config/Listener/JobCompletionNotificationListener.java
similarity index 53%
rename from src/main/java/com/example/CategoryBatch/JobCompletionNotificationListener.java
rename to src/main/java/com/example/CategoryBatch/Config/Listener/JobCompletionNotificationListener.java
index 3b3f78a..9008ac9 100644
--- a/src/main/java/com/example/CategoryBatch/JobCompletionNotificationListener.java
+++ b/src/main/java/com/example/CategoryBatch/Config/Listener/JobCompletionNotificationListener.java
@@ -1,13 +1,11 @@
-package com.example.CategoryBatch;
-
-import java.util.List;
-import java.util.Map;
+package com.example.CategoryBatch.Config.Listener;
 
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.springframework.batch.core.BatchStatus;
 import org.springframework.batch.core.JobExecution;
 import org.springframework.batch.core.JobExecutionListener;
+import org.springframework.dao.DataAccessException;
 import org.springframework.jdbc.core.JdbcTemplate;
 import org.springframework.stereotype.Component;
 
@@ -22,47 +20,47 @@ public class JobCompletionNotificationListener implements JobExecutionListener {
         this.template = template;
     }
 
+    /**
+     * 一時テーブル作成のクエリ・削除のクエリ
+     */
     private static final String CREATE_TEMP_TABLE = """
-            CREATE TEMP TABLE IF NOT EXISTS temp_categories (
-                id SERIAL PRIMARY KEY,
-                parent VARCHAR(255),
-                child VARCHAR(255),
-                grandchild VARCHAR(255)
-                );
-                INSERT INTO temp_categories (parent, child, grandchild)
-                SELECT
-                NULLIF(split_part(category_name, '/', 1), '') AS parent,
+            CREATE TEMP TABLE temp_categories AS
+            SELECT NULLIF(split_part(category_name, '/', 1), '') AS parent,
                 NULLIF(split_part(category_name, '/', 2), '') AS child,
                 NULLIF(split_part(category_name, '/', 3), '') AS grandchild
-                FROM
-                originals
-                WHERE
-                category_name IS NOT NULL;
-                """;
+            FROM originals
+            WHERE category_name IS NOT NULL;
 
+                                        """;
     private static final String DROP_TEMP_TABLE = """
-            DROP TABLE temp_categories;
+                DROP TABLE temp_categories;
             """;
 
     /**
      * 一時テーブル作成・挿入
      */
     @Override
-    public void beforeJob(JobExecution jobExecution) {
-        template.execute(CREATE_TEMP_TABLE);
-        log.info("一時テーブルを作成し、データを加工して挿入しました。");
+    public void beforeJob(@SuppressWarnings("null") JobExecution jobExecution) {
+        try {
+            // クエリ実行
+            template.execute(CREATE_TEMP_TABLE);
+            log.info("一時テーブルを作成し、データを加工して挿入しました");
+
+        } catch (DataAccessException e) {
+            log.error("beforeJobでのクエリ実行中にエラーが発生しました", e);
+        }
     }
 
     /**
      * 一時テーブル処理完了
      */
     @Override
-    public void afterJob(JobExecution jobExecution) {
+    public void afterJob(@SuppressWarnings("null") JobExecution jobExecution) {
         if (jobExecution.getStatus() == BatchStatus.COMPLETED) {
-            log.info("処理が完了しました！");
+            log.info("処理が完了しました");
 
             template.execute(DROP_TEMP_TABLE);
-            log.info("一時テーブルを削除します。");
+            log.info("一時テーブルを削除します");
         }
     }
 }
\ No newline at end of file
diff --git a/src/main/java/com/example/CategoryBatch/Config/Reader/ReaderConfig.java b/src/main/java/com/example/CategoryBatch/Config/Reader/ReaderConfig.java
new file mode 100644
index 0000000..7391b39
--- /dev/null
+++ b/src/main/java/com/example/CategoryBatch/Config/Reader/ReaderConfig.java
@@ -0,0 +1,96 @@
+package com.example.CategoryBatch.Config.Reader;
+
+import javax.sql.DataSource;
+
+import org.springframework.batch.item.database.JdbcCursorItemReader;
+import org.springframework.batch.item.database.builder.JdbcCursorItemReaderBuilder;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Lazy;
+import org.springframework.jdbc.core.RowMapper;
+
+import com.example.DTO.ItemsDto;
+
+@Configuration
+public class ReaderConfig {
+
+    private DataSource dataSource;
+
+    public ReaderConfig(@Lazy DataSource dataSource) {
+        this.dataSource = dataSource;
+    }
+
+    private static final String SELECT_ORIGINALS = """
+                SELECT o.name AS o_name,
+                o.condition_id AS o_condition_id,
+                COALESCE(
+                    (
+                        SELECT c.id
+                        FROM categories AS c
+                        WHERE -- category_nameから最初の3階層を抽出して比較
+                            c.name_all = CONCAT(
+                                NULLIF(split_part(o.category_name, '/', 1), ''),
+                                '/',
+                                NULLIF(split_part(o.category_name, '/', 2), ''),
+                                '/',
+                                NULLIF(split_part(o.category_name, '/', 3), '')
+                            )
+                        LIMIT 1
+                    ), -- カテゴリが見つからない場合はNULLを挿入
+                    NULL
+                ) AS category,
+                o.brand AS o_brand,
+                o.price AS o_price,
+                o.shipping AS o_shipping,
+                o.description AS o_description
+            FROM originals AS o;
+
+                """;
+    // SELECT o.name AS o_name,
+    // o.condition_id AS o_condition,
+    // CASE
+    // WHEN o.category_name IS NOT NULL THEN (
+    // SELECT c.id AS c_id
+    // FROM categories AS c
+    // WHERE c.name_all = o.category_name
+    // LIMIT 1
+    // )
+    // ELSE NULL
+    // END AS category,
+    // o.brand AS o_brand,
+    // o.price AS o_price,
+    // o.shipping AS o_shipping,
+    // o.description AS o_description
+    // FROM originals AS o;
+
+    private static final RowMapper<ItemsDto> ITEMS_ROW_MAPPER = (rs, i) -> {
+        ItemsDto itemsDto = new ItemsDto();
+
+        itemsDto.setName(rs.getString("o_name"));
+        itemsDto.setCondition(rs.getInt("o_condition_id"));
+        itemsDto.setCategory(rs.getInt("category"));
+        itemsDto.setBrand(rs.getString("o_brand"));
+        itemsDto.setPrice(rs.getDouble("o_price"));
+        itemsDto.setShipping(rs.getInt("o_shipping"));
+        itemsDto.setDescription(rs.getString("o_description"));
+
+        return itemsDto;
+    };
+
+    /**
+     * itemsリーダー
+     * 
+     * @return
+     */
+    @SuppressWarnings("null")
+    @Bean
+    public JdbcCursorItemReader<ItemsDto> itemReader() {
+        return new JdbcCursorItemReaderBuilder<ItemsDto>()
+                .dataSource(dataSource)
+                .name("importData")
+                .sql(SELECT_ORIGINALS)
+                .rowMapper(ITEMS_ROW_MAPPER)
+                .build();
+    }
+
+}
diff --git a/src/main/java/com/example/CategoryBatch/Config/Writer/WriteConfig.java b/src/main/java/com/example/CategoryBatch/Config/Writer/WriteConfig.java
new file mode 100644
index 0000000..eeed9b2
--- /dev/null
+++ b/src/main/java/com/example/CategoryBatch/Config/Writer/WriteConfig.java
@@ -0,0 +1,64 @@
+
+package com.example.CategoryBatch.Config.Writer;
+
+import javax.sql.DataSource;
+
+import org.springframework.batch.item.database.JdbcBatchItemWriter;
+import org.springframework.batch.item.database.builder.JdbcBatchItemWriterBuilder;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Lazy;
+
+import com.example.Domain.Items;
+
+@Configuration
+public class WriteConfig {
+
+    private DataSource dataSource;
+
+    public WriteConfig(@Lazy DataSource dataSource) {
+        this.dataSource = dataSource;
+    }
+
+    /**
+     * items移行用クエリ
+     */
+
+    private static final String INSERT_INTO_ITEMS = """
+            INSERT INTO items (
+                name
+                , condition
+                , category
+                , brand
+                , price
+                , shipping
+                , description
+                )
+            VALUES (
+                :name
+                , :condition
+                , :category
+                , :brand
+                , :price
+                , :shipping
+                , :description
+            )
+                        """;
+
+    /**
+     * itemsライター
+     *
+     * @param dataSource
+     * @return
+     */
+    @SuppressWarnings("null")
+    @Bean
+    public JdbcBatchItemWriter<Items> itemWriter() {
+        return new JdbcBatchItemWriterBuilder<Items>()
+                .sql(INSERT_INTO_ITEMS)
+                .dataSource(dataSource)
+                .beanMapped()
+                .build();
+    }
+
+}
diff --git a/src/main/java/com/example/CategoryBatch/DataSourceConfiguration.java b/src/main/java/com/example/CategoryBatch/DataSourceConfiguration.java
deleted file mode 100644
index b2865e9..0000000
--- a/src/main/java/com/example/CategoryBatch/DataSourceConfiguration.java
+++ /dev/null
@@ -1,20 +0,0 @@
-package com.example.CategoryBatch;
-
-import javax.sql.DataSource;
-import org.springframework.boot.jdbc.DataSourceBuilder;
-import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
-
-@Configuration
-public class DataSourceConfiguration {
-
-    @Bean
-    public DataSource dataSource() {
-        DataSourceBuilder dataSourceBuilder = DataSourceBuilder.create();
-        dataSourceBuilder.url("jdbc:postgresql://localhost:5432/gs-batch-processing");
-        dataSourceBuilder.username("postgres");
-        dataSourceBuilder.driverClassName("org.postgresql.Driver");
-        return dataSourceBuilder.build();
-    }
-
-}
diff --git a/src/main/java/com/example/CategoryBatch/CategoryTasklet.java b/src/main/java/com/example/CategoryBatch/Tasklet/CategoryTasklet.java
similarity index 55%
rename from src/main/java/com/example/CategoryBatch/CategoryTasklet.java
rename to src/main/java/com/example/CategoryBatch/Tasklet/CategoryTasklet.java
index 6f96ffa..dbb8217 100644
--- a/src/main/java/com/example/CategoryBatch/CategoryTasklet.java
+++ b/src/main/java/com/example/CategoryBatch/Tasklet/CategoryTasklet.java
@@ -1,6 +1,4 @@
-package com.example.CategoryBatch;
-
-import java.util.List;
+package com.example.CategoryBatch.Tasklet;
 
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -8,7 +6,6 @@ import org.springframework.batch.core.StepContribution;
 import org.springframework.batch.core.scope.context.ChunkContext;
 import org.springframework.batch.core.step.tasklet.Tasklet;
 import org.springframework.batch.repeat.RepeatStatus;
-import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.jdbc.core.JdbcTemplate;
 import org.springframework.stereotype.Component;
 import org.springframework.transaction.support.TransactionTemplate;
@@ -16,31 +13,31 @@ import org.springframework.transaction.support.TransactionTemplate;
 @Component
 public class CategoryTasklet implements Tasklet {
 
-    @Autowired
     private TransactionTemplate transactionTemplate;
 
     private final JdbcTemplate template;
 
-    public CategoryTasklet(JdbcTemplate template) {
+    public CategoryTasklet(JdbcTemplate template, TransactionTemplate transactionTemplate) {
         this.template = template;
+        this.transactionTemplate = transactionTemplate;
     }
 
-    private static final String INSERT_INTO_PARENT_CATEGORIES = """
+    private static final String INSERT_INTO_CATEGORIES = """
+            -- 1階層目（親）のカテゴリを挿入
             INSERT INTO categories (name)
             SELECT DISTINCT parent
             FROM temp_categories
             WHERE parent IS NOT NULL;
-            """;
-
-    private static final String INSERT_INTO_CHILD_CATEGORIES = """
+            -- 2階層目（子）のカテゴリを挿入
+            -- 親カテゴリが存在するものだけを選択
             INSERT INTO categories (name, parent_id)
             SELECT DISTINCT child,
                 c.id
             FROM temp_categories AS tc
                 JOIN categories AS c ON tc.parent = c.name
             WHERE child IS NOT NULL;
-            """;
-    private static final String INSERT_INTO_GRAND_CHILD_CATEGORIES = """
+            -- 3階層目（孫）のカテゴリを挿入
+            -- 子カテゴリと親カテゴリが存在するものだけを選択
             INSERT INTO categories (name, parent_id, name_all)
             SELECT DISTINCT tc.grandchild,
                 c1.id,
@@ -50,28 +47,22 @@ public class CategoryTasklet implements Tasklet {
                 JOIN categories AS c2 ON tc.parent = c2.name
                 AND c1.parent_id = c2.id
             WHERE tc.grandchild IS NOT NULL;
-            """;
+
+                        """;
 
     private static final Logger log = LogManager.getLogger(CategoryTasklet.class);
 
     @Override
-    public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) {
+    public RepeatStatus execute(@SuppressWarnings("null") StepContribution contribution,
+            @SuppressWarnings("null") ChunkContext chunkContext) {
         return transactionTemplate.execute(status -> {
             try {
                 // 処理開始時間
                 Long start = System.currentTimeMillis();
 
-                log.info("INSERT_INTO_CHILD_CATEGORIES　を実行します。");
-                int parentUpdateCount = template.update(INSERT_INTO_PARENT_CATEGORIES);
-                log.info("INSERT_INTO_CHILD_CATEGORIES　が完了しました。　更新件数：" + parentUpdateCount);
-
-                log.info("INSERT_INTO_CHILD_CATEGORIES　を実行します。");
-                int childUpdateCount = template.update(INSERT_INTO_CHILD_CATEGORIES);
-                log.info("INSERT_INTO_CHILD_CATEGORIES　が完了しました。　更新件数：" + childUpdateCount);
-
-                log.info("INSERT_INTO_GRAND_CHILD_CATEGORIES　を実行します。");
-                int grandChildUpdateCount = template.update(INSERT_INTO_GRAND_CHILD_CATEGORIES);
-                log.info("INSERT_INTO_GRAND_CHILD_CATEGORIES　が完了しました。　更新件数：" + grandChildUpdateCount);
+                log.info("categoriesテーブルへの挿入を開始します");
+                int updateCount = template.update(INSERT_INTO_CATEGORIES);
+                log.info("categoriesテーブルへの挿入が完了しました　更新件数：" + updateCount);
 
                 // 処理終了時間
                 Long end = System.currentTimeMillis();
@@ -80,12 +71,7 @@ public class CategoryTasklet implements Tasklet {
 
                 Double jobTimeInSecond = jobTime / 1000.0;
 
-                log.info("処理時間は{}でした。", jobTimeInSecond);
-
-                log.info("categoriesの確認。");
-                List<String> insertedParents = template.queryForList(
-                        "SELECT * FROM categories", String.class);
-                insertedParents.forEach(parentName -> log.info("挿入されたcategory: {}", parentName));
+                log.info("処理時間は{}秒です", jobTimeInSecond);
 
                 return RepeatStatus.FINISHED;
             } catch (Exception e) {
diff --git a/src/main/java/com/example/CategoryBatch/TaskletStepExecution.java b/src/main/java/com/example/CategoryBatch/TaskletStepExecution.java
deleted file mode 100644
index 550e15d..0000000
--- a/src/main/java/com/example/CategoryBatch/TaskletStepExecution.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package com.example.CategoryBatch;
-
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-
-import org.springframework.batch.core.ExitStatus;
-import org.springframework.batch.core.StepExecution;
-import org.springframework.batch.core.StepExecutionListener;
-import org.springframework.stereotype.Component;
-
-@Component
-public class TaskletStepExecution implements StepExecutionListener {
-
-    private static final Logger log = LogManager.getLogger(TaskletStepExecution.class);
-
-    @Override
-    public void beforeStep(StepExecution stepExecution) {
-        log.info("タスクレット開始");
-    }
-
-    @Override
-    public ExitStatus afterStep(StepExecution stepExecution) {
-        log.info("タスクレット終了");
-        return stepExecution.getExitStatus();
-    }
-}
diff --git a/src/main/java/com/example/ChunkBatch/Config/ChunkConfig.java b/src/main/java/com/example/ChunkBatch/Config/ChunkConfig.java
new file mode 100644
index 0000000..8973afe
--- /dev/null
+++ b/src/main/java/com/example/ChunkBatch/Config/ChunkConfig.java
@@ -0,0 +1,46 @@
+// package com.example.ChunkBatch.Config;
+
+// import javax.sql.DataSource;
+
+// import org.springframework.batch.item.database.JdbcCursorItemReader;
+// import
+// org.springframework.batch.item.database.builder.JdbcCursorItemReaderBuilder;
+// import org.springframework.beans.factory.annotation.Autowired;
+// import org.springframework.context.annotation.Configuration;
+// import org.springframework.jdbc.core.RowMapper;
+
+// import com.example.Domain.Category;
+
+// @Configuration
+// public class ChunkConfig {
+
+// private DataSource dataSource;
+
+// public ChunkConfig(DataSource dataSource) {
+// this.dataSource = dataSource;
+// }
+
+// private static final String SELECT_CATEGORIES = """
+// SELECT
+// category_name
+// FROM
+// originals
+// ORDER BY
+// id ASC;
+// """;
+
+// private static final RowMapper<Category> CATEGORY_ROW_MAPPER = (rs, i) -> {
+// Category category = new Category();
+// category.set
+// }
+
+// public JdbcCursorItemReader<Category> itemReader() {
+// return new JdbcCursorItemReaderBuilder<Category>()
+// .name("importCategory")
+// .sql(SELECT_CATEGORIES)
+// .dataSource(dataSource)
+// .rowMapper()
+// .build();
+
+// }
+// }
diff --git a/src/main/java/com/example/ChunkBatch/junk/CategoryMappingStepListener.java b/src/main/java/com/example/ChunkBatch/junk/CategoryMappingStepListener.java
new file mode 100644
index 0000000..37856bf
--- /dev/null
+++ b/src/main/java/com/example/ChunkBatch/junk/CategoryMappingStepListener.java
@@ -0,0 +1,74 @@
+package com.example.ChunkBatch.junk;
+// package com.example.ChunkBatch;
+// package com.example.CategoryBatch.Config.Listener;
+
+// import org.apache.logging.log4j.LogManager;
+// import org.apache.logging.log4j.Logger;
+// import org.springframework.batch.core.ExitStatus;
+// import org.springframework.batch.core.StepExecution;
+// import org.springframework.batch.core.StepExecutionListener;
+// import org.springframework.dao.DataAccessException;
+// import org.springframework.jdbc.core.JdbcTemplate;
+// import org.springframework.stereotype.Component;
+
+// @Component
+// public class CategoryMappingStepListener implements StepExecutionListener {
+
+// private static final Logger log =
+// LogManager.getLogger(CategoryMappingStepListener.class);
+
+// private final JdbcTemplate template;
+
+// public CategoryMappingStepListener(JdbcTemplate template) {
+// this.template = template;
+// }
+
+// /**
+// * カテゴリマッピングテーブル作成・削除のクエリ
+// */
+// private static final String CREATE_CATEGORY_MAPPING = """
+// CREATE TEMP TABLE IF NOT EXISTS category_mapping AS
+// SELECT
+// o.id AS o_id
+// , c.id AS c_id
+// FROM
+// temp_categories AS tc
+// JOIN
+// originals AS o ON tc.id = o.id
+// JOIN
+// categories AS c ON (
+// tc.parent || '/' || tc.child || '/' || tc.grandchild = c.name_all
+// OR
+// o.category_name IS NULL
+// );
+// """;
+
+// /**
+// * カテゴリマッピングテーブル作成
+// *
+// * @param jobExecution
+// */
+// @Override
+// public void beforeStep(@SuppressWarnings("null") StepExecution stepExecution)
+// {
+// try {
+// template.execute(CREATE_CATEGORY_MAPPING);
+// log.info("カテゴリマッピングテーブルを作成します");
+// } catch (DataAccessException e) {
+// log.error("itemsテーブルへの移行作業中にエラーが発生しました", e);
+// }
+// }
+
+// /**
+// * カテゴリマッピングテーブル削除
+// */
+// @Override
+// public ExitStatus afterStep(@SuppressWarnings("null") StepExecution
+// stepExecution) {
+// template.execute(DROP_CATEGORY_MAPPING);
+// log.info("カテゴリマッピングテーブルを削除しました");
+
+// return stepExecution.getExitStatus();
+// }
+
+// }
diff --git a/src/main/java/com/example/ChunkBatch/junk/CustomItemWriter.java b/src/main/java/com/example/ChunkBatch/junk/CustomItemWriter.java
new file mode 100644
index 0000000..b5c3cff
--- /dev/null
+++ b/src/main/java/com/example/ChunkBatch/junk/CustomItemWriter.java
@@ -0,0 +1,56 @@
+package com.example.ChunkBatch.junk;
+// package com.example.ChunkBatch;
+// package com.example.CategoryBatch.Config.Writer;
+
+// import javax.sql.DataSource;
+
+// import org.springframework.batch.item.Chunk;
+// import org.springframework.batch.item.ItemWriter;
+// import org.springframework.context.annotation.Bean;
+// import org.springframework.context.annotation.Configuration;
+// import org.springframework.context.annotation.Lazy;
+// import org.springframework.jdbc.core.JdbcTemplate;
+
+// import com.example.Domain.Items;
+
+// @Configuration
+// public class CustomItemWriter implements ItemWriter<Items> {
+
+// private DataSource dataSource;
+// private JdbcTemplate template;
+
+// public CustomItemWriter(@Lazy DataSource dataSource) {
+// this.dataSource = dataSource;
+// this.template = new JdbcTemplate(dataSource);
+// }
+
+// /**
+// * items移行用クエリ
+// */
+
+// private static final String INSERT_INTO_ITEMS = """
+// INSERT INTO items (
+// name,
+// condition,
+// category,
+// brand,
+// price,
+// shipping,
+// description
+// )
+// SELECT o.name,
+// o.condition_id,
+// cm.category_id,
+// o.brand,
+// o.price,
+// o.shipping,
+// o.description
+// FROM originals AS o
+// LEFT JOIN category_mapping AS cm ON o.id = cm.originals_id;
+// """;
+
+// @Override
+// public void write(Chunk<? extends Items> items) throws Exception {
+// template.execute(INSERT_INTO_ITEMS);
+// }
+// }
diff --git a/src/main/java/com/example/DTO/CategoryDto.java b/src/main/java/com/example/DTO/CategoryDto.java
deleted file mode 100644
index 43e929c..0000000
--- a/src/main/java/com/example/DTO/CategoryDto.java
+++ /dev/null
@@ -1,79 +0,0 @@
-// package com.example.DTO;
-
-// public class CategoryDto {
-// private Integer id;
-// private Integer parentId;
-// private String name;
-// private String nameAll;
-// private String parent;
-// private String child;
-// private String grandChild;
-
-// public CategoryDto() {
-// }
-
-// public Integer getId() {
-// return id;
-// }
-
-// public void setId(Integer id) {
-// this.id = id;
-// }
-
-// public Integer getParentId() {
-// return parentId;
-// }
-
-// public void setParentId(Integer parentId) {
-// this.parentId = parentId;
-// }
-
-// public String getName() {
-// return name;
-// }
-
-// public void setName(String name) {
-// this.name = name;
-// }
-
-// public String getNameAll() {
-// return nameAll;
-// }
-
-// public void setNameAll(String nameAll) {
-// this.nameAll = nameAll;
-// }
-
-// public String getParent() {
-// return parent;
-// }
-
-// public void setParent(String parent) {
-// this.parent = parent;
-// }
-
-// public String getChild() {
-// return child;
-// }
-
-// public void setChild(String child) {
-// this.child = child;
-// }
-
-// public String getGrandChild() {
-// return grandChild;
-// }
-
-// public void setGrandChild(String grandChild) {
-// this.grandChild = grandChild;
-// }
-
-// @Override
-// public String toString() {
-// return "categoryDto [id=" + id + ", parentId=" + parentId + ", name=" + name
-// + ", nameAll=" + nameAll
-// + ", parent=" + parent + ", child=" + child + ", grandChild=" + grandChild +
-// "]";
-// }
-
-// }
diff --git a/src/main/java/com/example/DTO/ItemsDto.java b/src/main/java/com/example/DTO/ItemsDto.java
new file mode 100644
index 0000000..7ae5b45
--- /dev/null
+++ b/src/main/java/com/example/DTO/ItemsDto.java
@@ -0,0 +1,96 @@
+package com.example.DTO;
+
+public class ItemsDto {
+
+    private Integer id;
+    private String name;
+    private Integer condition;
+    private Integer category;
+    private String nameAll;
+    private String brand;
+    private Double price;
+    private Integer shipping;
+    private String description;
+
+    public ItemsDto() {
+    }
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public Integer getCondition() {
+        return condition;
+    }
+
+    public void setCondition(Integer condition) {
+        this.condition = condition;
+    }
+
+    public Integer getCategory() {
+        return category;
+    }
+
+    public void setCategory(Integer category) {
+        this.category = category;
+    }
+
+    public String getBrand() {
+        return brand;
+    }
+
+    public void setBrand(String brand) {
+        this.brand = brand;
+    }
+
+    public Double getPrice() {
+        return price;
+    }
+
+    public void setPrice(Double price) {
+        this.price = price;
+    }
+
+    public Integer getShipping() {
+        return shipping;
+    }
+
+    public void setShipping(Integer shipping) {
+        this.shipping = shipping;
+    }
+
+    public String getDescription() {
+        return description;
+    }
+
+    public void setDescription(String description) {
+        this.description = description;
+    }
+
+    public String getNameAll() {
+        return nameAll;
+    }
+
+    public void setNameAll(String nameAll) {
+        this.nameAll = nameAll;
+    }
+
+    @Override
+    public String toString() {
+        return "ItemsDto [id=" + id + ", name=" + name + ", condition=" + condition + ", category=" + category
+                + ", nameAll=" + nameAll + ", brand=" + brand + ", price=" + price + ", shipping=" + shipping
+                + ", description=" + description + "]";
+    }
+}
diff --git a/src/main/java/com/example/DemoApplication.java b/src/main/java/com/example/DemoApplication.java
index 338ac32..73f35aa 100644
--- a/src/main/java/com/example/DemoApplication.java
+++ b/src/main/java/com/example/DemoApplication.java
@@ -1,37 +1,13 @@
 package com.example;
 
-import org.springframework.batch.core.Job;
-import org.springframework.batch.core.JobParameters;
-import org.springframework.batch.core.JobParametersBuilder;
-import org.springframework.batch.core.launch.JobLauncher;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.boot.CommandLineRunner;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
 @SpringBootApplication
-public class DemoApplication implements CommandLineRunner {
-
-	@Autowired
-	private JobLauncher jobLauncher;
-
-	@Autowired
-	private Job job;
-
+public class DemoApplication {
 	public static void main(String[] args) {
 
 		System.exit(SpringApplication.exit(SpringApplication.run(DemoApplication.class, args)));
 	}
 
-	@Override
-	public void run(String... args) throws Exception {
-		long currentTimeMillis = System.currentTimeMillis();
-
-		JobParameters parameters = new JobParametersBuilder()
-				.addLong("uniqueParam", currentTimeMillis)
-				.toJobParameters();
-
-		jobLauncher.run(job, parameters);
-	}
-
 }
\ No newline at end of file
diff --git a/src/main/java/com/example/Domain/Items.java b/src/main/java/com/example/Domain/Items.java
new file mode 100644
index 0000000..6e054c4
--- /dev/null
+++ b/src/main/java/com/example/Domain/Items.java
@@ -0,0 +1,86 @@
+package com.example.Domain;
+
+public class Items {
+    private Integer id;
+    private String name;
+    private Integer condition;
+    private Integer category;
+    private String brand;
+    private Double price;
+    private Integer shipping;
+    private String description;
+
+    @Override
+    public String toString() {
+        return "Items [id=" + id + ", name=" + name + ", condition=" + condition + ", category=" + category + ", brand="
+                + brand + ", price=" + price + ", shipping=" + shipping + ", description=" + description + "]";
+    }
+
+    public Items() {
+    }
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public Integer getCondition() {
+        return condition;
+    }
+
+    public void setCondition(Integer condition) {
+        this.condition = condition;
+    }
+
+    public Integer getCategory() {
+        return category;
+    }
+
+    public void setCategory(Integer category) {
+        this.category = category;
+    }
+
+    public String getBrand() {
+        return brand;
+    }
+
+    public void setBrand(String brand) {
+        this.brand = brand;
+    }
+
+    public Double getPrice() {
+        return price;
+    }
+
+    public void setPrice(Double price) {
+        this.price = price;
+    }
+
+    public Integer getShipping() {
+        return shipping;
+    }
+
+    public void setShipping(Integer shipping) {
+        this.shipping = shipping;
+    }
+
+    public String getDescription() {
+        return description;
+    }
+
+    public void setDescription(String description) {
+        this.description = description;
+    }
+
+}
diff --git a/src/main/resources/application.yml b/src/main/resources/application.yml
index 0f50bd9..64ff812 100644
--- a/src/main/resources/application.yml
+++ b/src/main/resources/application.yml
@@ -1,6 +1,6 @@
 spring:
     datasource:
-        url: jdbc:postgresql://localhost:5432/fleamarketbatchprocessing
+        url: jdbc:postgresql://localhost:5432/postgres
         username: postgres
         password: postgres
         driver-class-name: org.postgresql.Driver
@@ -14,10 +14,13 @@ server:
         context-path: /fleamarketbatchprocessing
 logging:
     level:
-        '[org.springframework.batch.item.database]': DEBUG
-        '[org.springframework.batch]': DEBUG
-        '[org.springframework.jdbc.core.JdbcTemplate]': DEBUG
-        '[org.springframework.transaction]': DEBUG
-        '[org.springframework.jdbc]': DEBUG
-        '[org.springframework.jdbc.datasource]': DEBUG
-        '[org.springframework.batch.item.support]': DEBUG
\ No newline at end of file
+        '[com.example]': WARN
+        '[com.zaxxer.hikari]': ERROR
+        '[org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer]': ERROR
+        '[org.springframework.batch]': ERROR
+        '[org.springframework.jdbc.core]': ERROR
+        '[org.springframework.jdbc]': ERROR
+        # '[org.springframework.batch.item.database]': INFO
+        # '[org.springframework.transaction]': INFO
+        # '[org.springframework.jdbc.datasource]': INFO
+        # '[org.springframework.batch.item.support]': INFO
\ No newline at end of file
diff --git a/src/main/resources/log4j2.xml b/src/main/resources/log4j2.xml
index 3cf784f..cf38be3 100644
--- a/src/main/resources/log4j2.xml
+++ b/src/main/resources/log4j2.xml
@@ -3,7 +3,7 @@
 <Configuration status="warn" name="flea-marcket-batch-processor">
     <Properties>
         <Property name="format1">%d{yyyy/MM/dd HH:mm:ss.SSS} [%t] %-6p %c{5} %n%m%n</Property>
-        <Property name="logfile">./logs/category.log</Property>
+        <Property name="logfile">/logs/category.log</Property>
         <Property name="logfile-archive">logs/category-%d{HH:mm:ss}-%i.log</Property>
     </Properties>
     <Appenders>
